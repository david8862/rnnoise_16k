#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script to dump RNNoise/RNNVad keras model weights to c code & header file, e.g. rnn_data.c/rnn_data.h
"""
import os, sys, argparse
import numpy as np
import re
from tensorflow.keras.models import load_model

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..'))
from common.utils import get_custom_objects


def printVector(f, vector, name):
    v = np.reshape(vector, (-1));
    #print('static const float ', name, '[', len(v), '] = \n', file=f)
    f.write('static const rnn_weight {}[{}] = {{\n   '.format(name, len(v)))
    for i in range(0, len(v)):
        f.write('{}'.format(min(127, int(round(256*v[i])))))
        if (i!=len(v)-1):
            f.write(',')
        else:
            break;
        if (i%8==7):
            f.write("\n   ")
        else:
            f.write(" ")
    #print(v, file=f)
    f.write('\n};\n\n')
    return;

def printLayer(f, hf, layer):
    weights = layer.get_weights()
    printVector(f, weights[0], layer.name + '_weights')
    if len(weights) > 2:
        printVector(f, weights[1], layer.name + '_recurrent_weights')
    printVector(f, weights[-1], layer.name + '_bias')
    name = layer.name
    activation = re.search('function (.*) at', str(layer.activation)).group(1).upper()
    if len(weights) > 2:
        f.write('const GRULayer {} = {{\n   {}_bias,\n   {}_weights,\n   {}_recurrent_weights,\n   {}, {}, ACTIVATION_{}\n}};\n\n'
                .format(name, name, name, name, weights[0].shape[0], weights[0].shape[1]/3, activation))
        hf.write('#define {}_SIZE {}\n'.format(name.upper(), int(weights[0].shape[1]/3)))
        hf.write('extern const GRULayer {};\n\n'.format(name));
    else:
        f.write('const DenseLayer {} = {{\n   {}_bias,\n   {}_weights,\n   {}, {}, ACTIVATION_{}\n}};\n\n'
                .format(name, name, name, weights[0].shape[0], weights[0].shape[1], activation))
        hf.write('#define {}_SIZE {}\n'.format(name.upper(), int(weights[0].shape[1])))
        hf.write('extern const DenseLayer {};\n\n'.format(name));



def keras_to_c(keras_model_file, output_code_file, output_header_file):
    custom_object_dict = get_custom_objects()
    model = load_model(keras_model_file, compile=False, custom_objects=custom_object_dict)

    weights = model.get_weights()

    code_file = open(output_code_file, 'w')
    header_file = open(output_header_file, 'w')

    code_file.write('/*This file is automatically generated from a Keras model*/\n\n')
    code_file.write('#ifdef HAVE_CONFIG_H\n#include "config.h"\n#endif\n\n#include "rnn.h"\n\n')

    header_file.write('/*This file is automatically generated from a Keras model*/\n\n')
    header_file.write('#ifndef RNN_DATA_H\n#define RNN_DATA_H\n\n#include "rnn.h"\n\n')

    layer_list = []
    for i, layer in enumerate(model.layers):
        if len(layer.get_weights()) > 0:
            printLayer(code_file, header_file, layer)
        if len(layer.get_weights()) > 2:
            layer_list.append(layer.name)

    header_file.write('struct RNNState {\n')
    for i, name in enumerate(layer_list):
        header_file.write('  float {}_state[{}_SIZE];\n'.format(name, name.upper()))
    header_file.write('};\n')

    header_file.write('\n\n#endif\n')

    code_file.close()
    header_file.close()


def main():
    parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS, description='Dump RNNoise/RNNVad keras model weights to c code & header file')
    parser.add_argument('--keras_model_file', required=True, type=str, help='path to keras model file')
    parser.add_argument('--output_code_file', required=False, type=str, help='output c code file, default=%(default)s', default='rnn_data.c')
    parser.add_argument('--output_header_file', required=False, type=str, help='output c header file, default=%(default)s', default='rnn_data.h')

    args = parser.parse_args()

    keras_to_c(args.keras_model_file, args.output_code_file, args.output_header_file)

    print('\nDone. model weights has been dumped to{} & {}'.format(args.output_code_file, args.output_header_file))


if __name__ == '__main__':
    main()
